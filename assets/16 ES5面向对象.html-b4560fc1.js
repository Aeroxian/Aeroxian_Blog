import{_ as n,p as a,q as s,a1 as t}from"./framework-f3fd2962.js";const e="/assets/image-20201018082323098-1004d19b.png",p="/assets/image-20201018085219432-354c7f15.png",o="/assets/image-20201018105907530-180795d7.png",c={},i=t(`<h2 id="_1-构造函数" tabindex="-1"><a class="header-anchor" href="#_1-构造函数" aria-hidden="true">#</a> 1 构造函数</h2><h3 id="_1-1-创建对象直接量" tabindex="-1"><a class="header-anchor" href="#_1-1-创建对象直接量" aria-hidden="true">#</a> 1.1 创建对象直接量</h3><h3 id="_1-2-new-object-构造函数" tabindex="-1"><a class="header-anchor" href="#_1-2-new-object-构造函数" aria-hidden="true">#</a> 1.2 new Object()构造函数</h3><h3 id="_1-3-es5-constructor-function" tabindex="-1"><a class="header-anchor" href="#_1-3-es5-constructor-function" aria-hidden="true">#</a> 1.3 ES5 constructor function</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>属性
	<span class="token keyword">this</span><span class="token punctuation">.</span>方法
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-1-添加成员" tabindex="-1"><a class="header-anchor" href="#_1-3-1-添加成员" aria-hidden="true">#</a> 1.3.1 添加成员</h4><h5 id="_1-通过this添加实例成员" tabindex="-1"><a class="header-anchor" href="#_1-通过this添加实例成员" aria-hidden="true">#</a> 1 通过this添加实例成员</h5><h5 id="_2-通过构造方法添加静态成员" tabindex="-1"><a class="header-anchor" href="#_2-通过构造方法添加静态成员" aria-hidden="true">#</a> 2 通过构造方法添加静态成员</h5><h6 id="只能通过构造方法访问" tabindex="-1"><a class="header-anchor" href="#只能通过构造方法访问" aria-hidden="true">#</a> 只能通过构造方法访问</h6><h4 id="_1-3-2-添加方法" tabindex="-1"><a class="header-anchor" href="#_1-3-2-添加方法" aria-hidden="true">#</a> 1.3.2 添加方法</h4><ol><li>prototype添加方法</li></ol><h3 id="_1-4-new-构造函数的过程" tabindex="-1"><a class="header-anchor" href="#_1-4-new-构造函数的过程" aria-hidden="true">#</a> 1.4 new 构造函数的过程</h3><h4 id="_1-4-1-在内存中创建一个新的空对象" tabindex="-1"><a class="header-anchor" href="#_1-4-1-在内存中创建一个新的空对象" aria-hidden="true">#</a> 1.4.1 在内存中创建一个新的空对象{}</h4><h4 id="_1-4-2-让函数中的this指向这个空对象" tabindex="-1"><a class="header-anchor" href="#_1-4-2-让函数中的this指向这个空对象" aria-hidden="true">#</a> 1.4.2. 让函数中的this指向这个空对象</h4><h4 id="_1-4-3-开始执行函数体" tabindex="-1"><a class="header-anchor" href="#_1-4-3-开始执行函数体" aria-hidden="true">#</a> 1.4.3. 开始执行函数体</h4><h4 id="_1-4-4-返回该对象" tabindex="-1"><a class="header-anchor" href="#_1-4-4-返回该对象" aria-hidden="true">#</a> 1.4.4. 返回该对象</h4><h2 id="_2-prototype原型" tabindex="-1"><a class="header-anchor" href="#_2-prototype原型" aria-hidden="true">#</a> 2 prototype原型</h2><ol><li>每一个<strong>构造函数</strong>都有一个<strong>prototype对象</strong></li><li>Each object in Javascript has a prototype and a prototype is an object itself.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//	true;</span>
Person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;say&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//	false;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-在该对象定义方法和属性" tabindex="-1"><a class="header-anchor" href="#_2-1-在该对象定义方法和属性" aria-hidden="true">#</a> 2.1 在该对象定义方法和属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">ConstructorName</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 很重要，不能漏掉，否则会覆盖之前的prototype,数据丢失</span>
	<span class="token literal-property property">constructor</span><span class="token operator">:</span> ConstructorName<span class="token punctuation">,</span>
	<span class="token function-variable function">function1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token function-variable function">funciton2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>将来<strong>所有的实例都能共享</strong></li><li>节省了内存</li></ol><h3 id="_2-2-constructor原型" tabindex="-1"><a class="header-anchor" href="#_2-2-constructor原型" aria-hidden="true">#</a> 2.2 constructor原型</h3><ol><li>对应构造函数</li></ol><h3 id="_2-3-proto-与propotype" tabindex="-1"><a class="header-anchor" href="#_2-3-proto-与propotype" aria-hidden="true">#</a> 2.3 __proto__与propotype</h3><ol><li><strong>每一个对象</strong>都有一个 __proto__属性</li><li>实例的 __proto__指向构造函数的propotype</li></ol><p><img src="`+e+'" alt=""></p><h3 id="_2-4-原型链" tabindex="-1"><a class="header-anchor" href="#_2-4-原型链" aria-hidden="true">#</a> 2.4 原型链</h3><ol><li>new一个实例会产生一个实例对象，实例对象有__proto__属性</li></ol><p><img src="'+p+`" alt=""></p><h3 id="_2-5-propotype玩法" tabindex="-1"><a class="header-anchor" href="#_2-5-propotype玩法" aria-hidden="true">#</a> 2.5 propotype玩法</h3><h4 id="_2-5-1-vue设置对象" tabindex="-1"><a class="header-anchor" href="#_2-5-1-vue设置对象" aria-hidden="true">#</a> 2.5.1 Vue设置对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Vue原型上挂载axios</span>
Vue<span class="token punctuation">.</span>propotype<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios
<span class="token comment">// Vue原型上挂载elementui的Message组件</span>
Vue<span class="token punctuation">.</span>propotype<span class="token punctuation">.</span>$message <span class="token operator">=</span> Message
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-继承" tabindex="-1"><a class="header-anchor" href="#_3-继承" aria-hidden="true">#</a> 3 继承</h2><h3 id="_3-1-call方法" tabindex="-1"><a class="header-anchor" href="#_3-1-call方法" aria-hidden="true">#</a> 3 .1 call方法</h3><ol><li>可以实现函数调用</li><li>可以改变函数中的this指向</li></ol><h3 id="_3-2-属性继承" tabindex="-1"><a class="header-anchor" href="#_3-2-属性继承" aria-hidden="true">#</a> 3.2 属性继承</h3><h3 id="_3-3-方法继承" tabindex="-1"><a class="header-anchor" href="#_3-3-方法继承" aria-hidden="true">#</a> 3.3. 方法继承</h3><p><img src="`+o+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Father money</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//	属性继承</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//	方法继承</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span>

<span class="token keyword">const</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;hzz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
Son <span class="token punctuation">{</span>name: &quot;hzz&quot;<span class="token punctuation">}</span>
name: &quot;hzz&quot;
__proto__: Father
    constructor: ƒ Son(name)
    __proto__: Object
 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span>
son<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-5-object-create-方法" tabindex="-1"><a class="header-anchor" href="#_3-5-object-create-方法" aria-hidden="true">#</a> 3.5 Object.create 方法</h3><ol><li>创建一个对象,方式1</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> personPropotypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">greeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello there </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mary <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personPropotypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
mary<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">;</span>
mary<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&#39;Williams&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mary<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mary<span class="token punctuation">.</span>language<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建一个对象，方式2</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> personPropotypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">greeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello there </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mary <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personPropotypes<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Williams&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mary<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mary<span class="token punctuation">.</span>language<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),l=[i];function u(r,d){return a(),s("div",null,l)}const v=n(c,[["render",u],["__file","16 ES5面向对象.html.vue"]]);export{v as default};
