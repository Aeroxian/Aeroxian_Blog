import{_ as n,p as a,q as s,a1 as t}from"./framework-f3fd2962.js";const e={},p=t(`<h2 id="_1-字符串操作" tabindex="-1"><a class="header-anchor" href="#_1-字符串操作" aria-hidden="true">#</a> 1 字符串操作</h2><h3 id="_1-1-charat对应位置上的字符" tabindex="-1"><a class="header-anchor" href="#_1-1-charat对应位置上的字符" aria-hidden="true">#</a> 1.1 charAt对应位置上的字符</h3><h4 id="_1-1-1-字符串通过-index-获取" tabindex="-1"><a class="header-anchor" href="#_1-1-1-字符串通过-index-获取" aria-hidden="true">#</a> 1.1.1 字符串通过[index]获取</h4><h3 id="_1-2-字符编码相关" tabindex="-1"><a class="header-anchor" href="#_1-2-字符编码相关" aria-hidden="true">#</a> 1.2 字符编码相关</h3><h4 id="_1-2-1-charcodeat对应位置上的编码" tabindex="-1"><a class="header-anchor" href="#_1-2-1-charcodeat对应位置上的编码" aria-hidden="true">#</a> 1.2.1 charCodeAt对应位置上的编码</h4><h5 id="_1-a-97" tabindex="-1"><a class="header-anchor" href="#_1-a-97" aria-hidden="true">#</a> 1 ’a‘-97</h5><h5 id="_2-a-65" tabindex="-1"><a class="header-anchor" href="#_2-a-65" aria-hidden="true">#</a> 2 &#39;A&#39;-65</h5><h5 id="_3-0-48" tabindex="-1"><a class="header-anchor" href="#_3-0-48" aria-hidden="true">#</a> 3 &#39;0&#39;-48</h5><h4 id="_1-2-2-string-fromcharcode-code-编码转字符" tabindex="-1"><a class="header-anchor" href="#_1-2-2-string-fromcharcode-code-编码转字符" aria-hidden="true">#</a> 1.2.2 String.fromCharCode(code)编码转字符</h4><h3 id="_1-3-字符串位置" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串位置" aria-hidden="true">#</a> 1.3 字符串位置</h3><h4 id="_1-3-1-indexof" tabindex="-1"><a class="header-anchor" href="#_1-3-1-indexof" aria-hidden="true">#</a> 1.3.1 indexOf</h4><h4 id="_1-3-2-lastindexof" tabindex="-1"><a class="header-anchor" href="#_1-3-2-lastindexof" aria-hidden="true">#</a> 1.3.2 lastIndexOf</h4><h3 id="_1-4-截取字符串" tabindex="-1"><a class="header-anchor" href="#_1-4-截取字符串" aria-hidden="true">#</a> 1.4 截取字符串</h3><h4 id="_1-4-1-substring-开始位置-结束位置" tabindex="-1"><a class="header-anchor" href="#_1-4-1-substring-开始位置-结束位置" aria-hidden="true">#</a> 1.4.1 substring(开始位置，[结束位置])</h4><h4 id="_1-4-2-substr-开始位置-字符数量" tabindex="-1"><a class="header-anchor" href="#_1-4-2-substr-开始位置-字符数量" aria-hidden="true">#</a> 1.4.2 substr(开始位置，[字符数量])</h4><h4 id="_1-4-3-slice-开始位置-结束位置" tabindex="-1"><a class="header-anchor" href="#_1-4-3-slice-开始位置-结束位置" aria-hidden="true">#</a> 1.4.3 slice(开始位置，[结束位置])</h4><h5 id="_1-负数位置⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_1-负数位置⭐⭐⭐" aria-hidden="true">#</a> 1 负数位置⭐⭐⭐</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;c&quot;</span>
<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &quot;bc&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-玩法-零补齐两位指数⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_2-玩法-零补齐两位指数⭐⭐⭐" aria-hidden="true">#</a> 2 玩法：零补齐两位指数⭐⭐⭐</h5><blockquote><p>es6中提供了padStart方法</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> minutes <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> seconds <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// (&quot;0&quot;+minutes).slice(-2) 主要是转化为两位数，8-&gt;08</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> hours<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> minutes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> seconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 19::08::03</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-split-分割为数组s" tabindex="-1"><a class="header-anchor" href="#_1-5-split-分割为数组s" aria-hidden="true">#</a> 1.5 split 分割为数组s</h3><h4 id="_1-5-1-玩法-逆序字符串" tabindex="-1"><a class="header-anchor" href="#_1-5-1-玩法-逆序字符串" aria-hidden="true">#</a> 1.5.1 玩法：逆序字符串</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;cba&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-6-replaceall" tabindex="-1"><a class="header-anchor" href="#_1-6-replaceall" aria-hidden="true">#</a> 1.6 replaceAll</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;tmd,外卖还没到，真tmd!&quot;</span>
<span class="token comment">// ***,外卖还没到，真***!</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;tmd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-1-玩法-实现上述效果不用replace" tabindex="-1"><a class="header-anchor" href="#_1-6-1-玩法-实现上述效果不用replace" aria-hidden="true">#</a> 1.6.1 玩法：实现上述效果不用replace</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;tmd,外卖还没到，真tmd!&quot;</span>
<span class="token comment">//[&quot;&quot;, &quot;,外卖还没到，真&quot;, &quot;!&quot;]</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;tmd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-startswith" tabindex="-1"><a class="header-anchor" href="#_1-7-startswith" aria-hidden="true">#</a> 1.7 startsWith</h3><h3 id="_1-8-endswith" tabindex="-1"><a class="header-anchor" href="#_1-8-endswith" aria-hidden="true">#</a> 1.8 endsWith</h3><h3 id="_1-9-includes" tabindex="-1"><a class="header-anchor" href="#_1-9-includes" aria-hidden="true">#</a> 1.9 includes</h3><h4 id="_1-9-1-返回boolean" tabindex="-1"><a class="header-anchor" href="#_1-9-1-返回boolean" aria-hidden="true">#</a> 1.9.1 返回boolean</h4><h3 id="_1-10-padstart-位数-填充的字符" tabindex="-1"><a class="header-anchor" href="#_1-10-padstart-位数-填充的字符" aria-hidden="true">#</a> 1.10 padStart(位数,填充的字符)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
hours<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;07&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-10-1-padend" tabindex="-1"><a class="header-anchor" href="#_1-10-1-padend" aria-hidden="true">#</a> 1.10.1 padEnd</h4><h3 id="_1-11-repeat重复字符串" tabindex="-1"><a class="header-anchor" href="#_1-11-repeat重复字符串" aria-hidden="true">#</a> 1.11 repeat重复字符串</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-模板字符串" tabindex="-1"><a class="header-anchor" href="#_2-模板字符串" aria-hidden="true">#</a> 2 模板字符串</h2><h3 id="_2-1-底层原理是通过正则匹配字符串" tabindex="-1"><a class="header-anchor" href="#_2-1-底层原理是通过正则匹配字符串" aria-hidden="true">#</a> 2.1 底层原理是通过正则匹配字符串</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Aeroxian, school = &quot;</span><span class="token constant">CAU</span>&quot;<span class="token punctuation">;</span>
<span class="token comment">// 模拟模板字符串</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;My name is \${name},at \${school}!&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 匹配\${任意字符}， 通过()单独拿出括号的内容</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\$\\{([^\\}]*)\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// My name is Aeroxian,at CAU</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token doc-comment comment">/** arguments
 [Arguments] <span class="token punctuation">{</span>
  &#39;0&#39;: &#39;$<span class="token punctuation">{</span>name<span class="token punctuation">}</span>&#39;,
  &#39;1&#39;: &#39;name&#39;,
  &#39;2&#39;: 11,
  &#39;3&#39;: &#39;My name is $<span class="token punctuation">{</span>name<span class="token punctuation">}</span>,at $<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;
<span class="token punctuation">}</span>
[Arguments] <span class="token punctuation">{</span>
  &#39;0&#39;: &#39;$<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;,
  &#39;1&#39;: &#39;school&#39;,
  &#39;2&#39;: 22,
  &#39;3&#39;: &#39;My name is $<span class="token punctuation">{</span>name<span class="token punctuation">}</span>,at $<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;
<span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-玩法-快速拼接成有序列表" tabindex="-1"><a class="header-anchor" href="#_2-2-玩法-快速拼接成有序列表" aria-hidden="true">#</a> 2.2 玩法：快速拼接成有序列表</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Aeroxian&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hzz&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lis <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;ul&gt;
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lis<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
    &lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
&lt;ul&gt;
&lt;li&gt;Aeroxian&lt;/li&gt;&lt;li&gt;hzz&lt;/li&gt;
&lt;/ul&gt;
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-玩法-web中content-type" tabindex="-1"><a class="header-anchor" href="#_2-3-玩法-web中content-type" aria-hidden="true">#</a> 2.3 玩法：web中content-type</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> type <span class="token operator">=</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
	<span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;charset=utf-8</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-模板标签" tabindex="-1"><a class="header-anchor" href="#_2-4-模板标签" aria-hidden="true">#</a> 2.4 模板标签</h3><ol><li>提供了可以对模板字符操作的空间</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Aeroxian&quot;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> tag<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** str
0: &quot;My name is &quot;
1: &quot;,and &quot;
2: &quot; years old&quot;
 */</span>

<span class="token doc-comment comment">/** arguments
0: (3) [&quot;My name is &quot;, &quot;,and &quot;, &quot; years old&quot;, raw: Array(3)]
1: &quot;Aeroxian&quot;
2: 25
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(e,[["render",i],["__file","05 字符串.html.vue"]]);export{r as default};
